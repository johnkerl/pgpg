// ================================================================
// LEXICAL ELEMENTS
// ================================================================

// ----------------------------------------------------------------
// CHARACTER CLASSES
// ----------------------------------------------------------------

_letter : 'a'-'z' | 'A'-'Z' | '\u00a0'-'\u00ff' | '\u0100'-'\U0010ffff';
_decdig : '0'-'9' ;
_leading_idchar : _letter | '_' ;
_idchar : _letter | _decdig | '_' ;
!whitespace : ' ' | '\t' | '\n' | '\r' ;
!comment : '#'  {.} '\n' ;

// ----------------------------------------------------------------
// INT/FLOAT/BOOLEAN LITERALS
// ----------------------------------------------------------------

// Notes on int literals:
// * Leading minus sign is handled via the unary-minus operator, not here.
int_literal
  : _decdig { _decdig }
;

// ----------------------------------------------------------------
// VARIABLES

variable_name : _leading_idchar { _idchar } ;

// ================================================================
// SYNTAX ELEMENTS
// ================================================================

// ----------------------------------------------------------------
Root
  : StatementBlock
;

// ----------------------------------------------------------------
StatementBlock

  : Statement

  // So statements can start with a semicolon
  | ";" StatementBlock

  // Normal case for sequential statements like '$x=1; $y=2'
  | Statement ";" StatementBlock
;

Statement
  : Assignment
  | Evaluation
;

Assignment
  : variable_name "=" Rvalue
;

Evaluation
  : Rvalue
;

// ----------------------------------------------------------------
// BEGIN RVALUE OPERATOR-PRECEDENCE CHAIN
// ----------------------------------------------------------------

Rvalue : PrecedenceChainStart ;

PrecedenceChainStart : AddSubTerm ;

AddSubTerm
  : AddSubTerm "+" MulDivTerm
  | AddSubTerm "-" MulDivTerm
  | MulDivTerm
;

MulDivTerm
  : MulDivTerm "*" UnaryOpTerm
  | MulDivTerm "/" UnaryOpTerm
  | MulDivTerm "%" UnaryOpTerm
  | UnaryOpTerm
;

UnaryOpTerm
  : "+"  UnaryOpTerm
  | "-"  UnaryOpTerm
  | PowTerm
;

PowTerm
  : PrecedenceChainEnd "**" PowTerm

  // The leading -/+ isn't part of the int/float token -- it's treated as
  // a unary operator. (Making it part of the token leads to LR1 conflicts, and is also inelegant.)
  // However, this means things like '2 ** -3' result in mashup of two operators next to one
  // another. For '2 + -3' and '2 * -3', this happens fine down the precedence chain since
  // AddSubTerm and MulDivTerm are above UnaryOpTerm. Since PowTerm is below UnaryOpTerm, though,
  // we need to be explicit about '2 ** -3' in a way that we do not need to for '2 * -3'.  Also, we
  // can't use 'PrecedenceChainEnd "**" UnaryOpTerm', as this also results in LR1 conflicts.

  | PrecedenceChainEnd "**" "-" PowTerm

  | PrecedenceChainEnd "**" "+" PowTerm

  | PrecedenceChainEnd
;

// Please Excuse My Dear Aunt Sally! :) We've gotten to the 'P' so we're done
// with the operator-precedence chain. :)

PrecedenceChainEnd
  : "(" Rvalue ")"
  | variable_name
  | int_literal
;

// ----------------------------------------------------------------
// END RVALUE OPERATOR-PRECEDENCE CHAIN
// ----------------------------------------------------------------
